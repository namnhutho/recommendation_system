# hybrid_recommend.py - auto generated
from pyspark.sql.functions import col, explode, struct, collect_list, expr,slice

def map_recommendations(recommendations, index_to_user, index_to_product, spark):
    recommendations = recommendations.withColumn("recommendations", explode(col("recommendations")))
    recommendations = recommendations.select(
        col("user_index"),
        col("recommendations.product_index").alias("product_index"),
        col("recommendations.rating").alias("predicted_rating")
    ).toPandas()

    recommendations["user_id"] = recommendations["user_index"].map(index_to_user)
    recommendations["product_id"] = recommendations["product_index"].map(index_to_product)
    return recommendations[["user_id", "product_id", "predicted_rating"]]

def build_hybrid(cf_recommendations_spark, cbf_df, spark):
    # T√≠nh ƒëi·ªÉm d·ª±a tr√™n n·ªôi dung (CBF)
    cbf_recommendations = (
        cbf_df
        .groupBy("i")
        .agg(collect_list(struct("j", "cosine_similarity")).alias("recommendations"))
        .withColumn("recommendations", slice(col("recommendations"), 1, 10))  # l·∫•y top 10
        .withColumn("recommendation", explode(col("recommendations")))
        .select(
            col("i").alias("product_id"),
            col("recommendation.j").alias("recommended_product"),
            (col("recommendation.cosine_similarity") * 0.3).alias("cbf_score")
        )
    )

    # K·∫øt h·ª£p CF v√† CBF
    hybrid = (
        cf_recommendations_spark
        .join(cbf_recommendations, on=["product_id"], how="left")
        .fillna({"cbf_score": 0})
        .withColumn("final_score", col("predicted_rating") * 0.7 + col("cbf_score"))
    )

    return hybrid.orderBy(col("final_score").desc())

# def build_hybrid(cf_recommendations_spark, cbf_df, spark):
#     cbf_recommendations = cbf_df.groupBy("i").agg(collect_list(struct("j", "cosine_similarity")).alias("recommendations"))
#     cbf_recommendations = cbf_recommendations.withColumn("recommendations", expr("slice(recommendations, 1, 10)"))
#     cbf_recommendations = cbf_recommendations.selectExpr("i as product_id", "explode(recommendations) as recs")
#     cbf_recommendations = cbf_recommendations.selectExpr("product_id", "recs.j as recommended_product", "recs.cosine_similarity as cbf_score")
#     cbf_recommendations = cbf_recommendations.withColumn("cbf_score", col("cbf_score") * 0.3)

#     hybrid = cf_recommendations_spark.join(cbf_recommendations, on=["product_id"], how="left").fillna(0, subset=["cbf_score"])
#     hybrid = hybrid.withColumn("final_score", col("predicted_rating") * 0.7 + col("cbf_score"))
#     return hybrid.orderBy(col("final_score").desc())

# import time
# from pyspark.sql.functions import col, collect_list, struct, expr

# def build_hybrid(cf_recommendations_spark, cbf_df, spark):
#     start_time = time.time()
#     print("üîß B·∫Øt ƒë·∫ßu x√¢y d·ª±ng m√¥ h√¨nh Hybrid...")

#     print("üì¶ B∆∞·ªõc 1: Gom nh√≥m v√† l·∫•y top 10 s·∫£n ph·∫©m t·ª´ CBF...")
#     cbf_recommendations = cbf_df.groupBy("i").agg(collect_list(struct("j", "cosine_similarity")).alias("recommendations"))
#     print(f"  ‚ûï T·ªïng s·∫£n ph·∫©m c√≥ CBF: {cbf_recommendations.count()}")

#     cbf_recommendations = cbf_recommendations.withColumn("recommendations", expr("slice(recommendations, 1, 10)"))
#     cbf_recommendations = cbf_recommendations.selectExpr("i as product_id", "explode(recommendations) as recs")
#     cbf_recommendations = cbf_recommendations.selectExpr("product_id", "recs.j as recommended_product", "recs.cosine_similarity as cbf_score")
#     cbf_recommendations = cbf_recommendations.withColumn("cbf_score", col("cbf_score") * 0.3)
#     print(f"  ‚úÖ S·ªë d√≤ng sau explode (CBF recommendations): {cbf_recommendations.count()}")

#     print("üîó B∆∞·ªõc 2: Join CF v·ªõi CBF...")
#     hybrid = cf_recommendations_spark.join(cbf_recommendations, on=["product_id"], how="left")
#     print(f"  üîÑ S·ªë d√≤ng sau join: {hybrid.count()}")

#     print("üßÆ B∆∞·ªõc 3: T√≠nh ƒëi·ªÉm hybrid t·ªïng h·ª£p (70% CF + 30% CBF)...")
#     hybrid = hybrid.fillna(0, subset=["cbf_score"])
#     hybrid = hybrid.withColumn("final_score", col("predicted_rating") * 0.7 + col("cbf_score"))

#     hybrid = hybrid.orderBy(col("final_score").desc())
#     print(f"‚úÖ Ho√†n t·∫•t hybrid. T·ªïng s·ªë d√≤ng: {hybrid.count()}")
    
#     elapsed = time.time() - start_time
#     print(f"‚è±Ô∏è T·ªïng th·ªùi gian x·ª≠ l√Ω hybrid: {elapsed:.2f} gi√¢y")

#     return hybrid


